package vulnspa.handler;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.servlet.NoHandlerFoundException;
import vulnspa.model.ErrorResponse;

import java.io.IOException;

/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π, —Ñ–æ—Ä–º–∏—Ä—É—é—â–∏–π —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–Ω—è—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤.
 */
@RestControllerAdvice
public class GlobalExceptionHandler {

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –≤ –æ—Ç–≤–µ—Ç 403.
     *
     * @param request —Ç–µ–∫—É—â–∏–π HTTP-–∑–∞–ø—Ä–æ—Å.
     * @return –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ.
     */
    @ExceptionHandler(org.springframework.security.access.AccessDeniedException.class)
    @ResponseStatus(HttpStatus.FORBIDDEN)
    public ErrorResponse handleAccessDeniedException(HttpServletRequest request) {
        return new ErrorResponse("Forbidden", "Access is denied", request.getRequestURI());
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 401, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
     *
     * @param request —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å.
     * @return —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ.
     */
    @ExceptionHandler(org.springframework.security.authentication.AuthenticationCredentialsNotFoundException.class)
    @ResponseStatus(HttpStatus.UNAUTHORIZED)
    public ErrorResponse handleUnauthorizedException(HttpServletRequest request) {
        return new ErrorResponse("Unauthorized", "Authentication is required", request.getRequestURI());
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ 404 –¥–ª—è API –∏ SPA.
     *
     * @param request —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å.
     * @param response –æ—Ç–≤–µ—Ç, –∫—É–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
     * @throws IOException –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∑–∞–ø–∏—Å–∏.
     * @throws ServletException –ø—Ä–∏ –æ—à–∏–±–∫–µ —Ñ–æ—Ä–≤–∞—Ä–¥–∞.
     */
    @ExceptionHandler(NoHandlerFoundException.class)
    public void handleNotFound(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        String uri = request.getRequestURI();


        if (uri.startsWith("/api/")) {
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            response.setContentType("application/json");
            response.getWriter().write("{\"error\":\"Not Found\",\"message\":\"Resource not found\",\"path\":\"" + uri + "\"}");
        } else {
            request.getRequestDispatcher("/index.html").forward(request, response);
        }
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç 500 –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ—á–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π.
     *
     * @param request —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å.
     * @param ex –≤–æ–∑–Ω–∏–∫—à–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
     * @return –æ—Ç–≤–µ—Ç —Å –∫–æ–¥–æ–º 500 –∏ —Ç–µ–∫—Å—Ç–æ–º –æ—à–∏–±–∫–∏.
     */
    @ExceptionHandler(Exception.class)
    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    public ErrorResponse handleGeneralError(HttpServletRequest request, Exception ex) {
        System.out.println("üî• EXCEPTION: " + ex.getClass().getName() + " - " + ex.getMessage());
        return new ErrorResponse("Internal Server Error", ex.getMessage(), request.getRequestURI());
    }
}
