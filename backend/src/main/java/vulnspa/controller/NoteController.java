package vulnspa.controller;

import freemarker.template.Configuration;
import freemarker.template.Template;
import freemarker.template.TemplateException;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.*;
import vulnspa.model.Note;
import vulnspa.repository.NoteRepository;

import java.io.IOException;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.*;


/**
 * REST-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π CRUD-–æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏.
 * –ú–Ω–æ–≥–∏–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ —É–ø—Ä–æ—â–µ–Ω—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π.
 */
@RestController
@RequestMapping("/api/notes")
public class NoteController {
    @Autowired
    private NoteRepository noteRepository;

    /**
     * –†–µ–Ω–¥–µ—Ä–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏ —Å –ø–æ–º–æ—â—å—é —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞ FreeMarker.
     *
     * @param note –∑–∞–º–µ—Ç–∫–∞, —á—å—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.
     * @return –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–∏–±–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
     */
    private String renderNoteContent(Note note) {
        try {
            Configuration cfg = new Configuration(Configuration.VERSION_2_3_32);
            cfg.setFallbackOnNullLoopVariable(false);
            cfg.setClassicCompatible(true);

            Template template = new Template("note-" + note.getId(), new StringReader(note.getContent()), cfg);

            Map<String, Object> dataModel = new HashMap<>();
            dataModel.put("author", note.getAuthor());

            StringWriter out = new StringWriter();
            template.process(dataModel, out);

            return out.toString();

        } catch (IOException | TemplateException e) {
            e.printStackTrace();
            return "[rendering error]";
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ —Å –ø—Ä–µ–¥—Ä–µ–Ω–¥–µ—Ä–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.
     *
     * @return –∫–æ–ª–ª–µ–∫—Ü–∏—è –∑–∞–º–µ—Ç–æ–∫, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç.
     */
    @GetMapping
    public List<Map<String, Object>> getNotes() {
        List<Note> notes = noteRepository.findAll();
        List<Map<String, Object>> result = new ArrayList<>();

        for (Note note : notes) {
            Map<String, Object> item = new HashMap<>();
            item.put("id", note.getId());
            item.put("author", note.getAuthor());
            item.put("title", note.getTitle());
            item.put("content", renderNoteContent(note));

            result.add(item);
        }

        return result;
    }

//    ${"freemarker.template.utility.Execute"?new()("whoami")}
//${"freemarker.template.utility.Execute"?new()("id")}

    /* Broken Access Control –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∞ –∑–∞–º–µ—Ç–∫–∏, –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏ –æ—Ç —á—É–∂–æ–≥–æ –∏–º–µ–Ω–∏ */
//    @PostMapping
//    public Note createNote(@RequestBody Note note) {
//        return noteRepository.save(note);
//    }
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É –∏–∑ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π JSON-—Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª–µ–π.
     *
     * @param rawJson —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
     * @return —Å–æ–∑–¥–∞–Ω–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å –∑–∞–º–µ—Ç–∫–∏.
     */
    @PostMapping
    public Note createRawNote(@RequestBody String rawJson) {
        // üíÄ –£—è–∑–≤–∏–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ JSON
        JSONObject json = new JSONObject(rawJson);
        System.out.println(json.toString());

        // –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å "content" –∏ "author"
        String content = json.optString("content", "(–ø—É—Å—Ç–æ)");
        String author = json.optString("author", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ");
        Note note = new Note();
        note.setAuthor(author);
        note.setContent(content);
        return noteRepository.save(note);
    }

    /* Broken Access Control –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∞ –∑–∞–º–µ—Ç–∫–∏, –º–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å –ª—é–±—ã–µ –∑–∞–º–µ—Ç–∫–∏ */
    /**
     * –£–¥–∞–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.
     *
     * @param id –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–º–µ—Ç–∫–∏.
     * @param user —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω).
     * @return {@code 200 OK}, –µ—Å–ª–∏ –∑–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞, –∏–Ω–∞—á–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏.
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteNote(@PathVariable Long id, @AuthenticationPrincipal UserDetails user) {
        Optional<Note> noteOpt = noteRepository.findById(id);
        if (noteOpt.isEmpty()) {
            return ResponseEntity.notFound().build();
        }

        Note note = noteOpt.get();

        // –ü–∞—Å—Ö–∞–ª–∫–∞: –ß–∞–∫–∞ —É–¥–∞–ª—è—Ç—å –Ω–µ–ª—å–∑—è
        if ("–ß–∞–∫".equalsIgnoreCase(note.getAuthor())) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN)
                    .body(Map.of("error", "–ù–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å –∑–∞–º–µ—Ç–∫–∏ –ß–∞–∫–∞ –ù–æ—Ä—Ä–∏—Å–∞. –≠—Ç–æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ. –û–Ω —É–∂–µ –≤—ã–µ—Ö–∞–ª."));
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä—Å—Ç–≤–∞
//        if (!note.getAuthor().equals(user.getUsername())) {
//            return ResponseEntity.status(HttpStatus.FORBIDDEN)
//                    .body(Map.of("error", "–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏."));
//        }

        noteRepository.deleteById(id);
        return ResponseEntity.ok().build();
    }
}